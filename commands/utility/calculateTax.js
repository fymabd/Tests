// Ø¯Ø§Ù„Ø© Ø­Ø³Ø§Ø¨ Ø§Ù„Ø¶Ø±ÙŠØ¨Ø©
async function calculateTax(interaction) {
    await interaction.deferReply({ ephemeral: false });

    const option = interaction.options.get("number");
    if (!option) {
        return interaction.editReply(
            "**ÙŠÙ€Ø¬Ù€Ø¨ Ø§Ù† ØªÙ€Ø¶Ù€Ø¹ Ø±Ù‚Ù€Ù… Ø¨Ù€Ø®Ù€ÙŠÙ€Ø§Ø± number.**",
        );
    }

    let number = option.value;
    const regex = /^[0-9]+([kKmMbB])?$/;

    if (!regex.test(number)) {
        return interaction.editReply(
            "**ÙŠÙ€Ø¬Ù€Ø¨ Ø§Ù† ØªÙ€Ø­Ù€ØªÙ€ÙˆÙŠ Ø§Ù„Ù€Ø±Ø³Ù€Ø§Ù„Ù€Ø© Ø¹Ù€Ù„Ù€Ù‰ Ø±Ù‚Ù€Ù….**",
        );
    }

    if (number.endsWith("m") || number.endsWith("M")) {
        number = parseFloat(number.slice(0, -1)) * 1000000;
    } else if (number.endsWith("k") || number.endsWith("K")) {
        number = parseFloat(number.slice(0, -1)) * 1000;
    } else if (number.endsWith("b") || number.endsWith("B")) {
        number = parseFloat(number.slice(0, -1)) * 1000000000;
    } else {
        number = parseFloat(number);
    }

    if (isNaN(number) || number < 1) {
        return interaction.editReply(
            "**ÙŠÙ€Ø¬Ù€Ø¨ Ø£Ù† ÙŠÙ€ÙƒÙ€ÙˆÙ† Ø§Ù„Ù€Ø±Ù‚Ù€Ù… Ø§ÙƒÙ€Ø¨Ù€Ø± Ù…Ù€Ù† Ø§Ùˆ ÙŠÙ€Ø³Ù€Ø§ÙˆÙŠ Ø§Ù„Ù€ÙˆØ§Ø­Ù€Ø¯**",
        );
    }

    let taxwi = Math.floor((number * 20) / 19 + 1);
    let tax2 = Math.floor((number * 20) / 19 + 1 - number);
    let tax3 = Math.floor((tax2 * 20) / 19 + 1);
    let tax4 = Math.floor(tax2 + tax3 + number);
    let num = taxwi - number;

    return interaction.editReply(
        `** ðŸ’³ Ø§Ù„Ù€Ù…Ù€Ø¨Ù€Ù„Ù€Øº **  :  **__${number}__** \n ** ðŸ’°  Ø§Ù„Ù€Ø¶Ù€Ø±ÙŠÙ€Ø¨Ù€Ø© **  :  **__${num}__** \n ** ðŸ’µ Ø§Ù„Ù€Ù…Ù€Ø¨Ù€Ù„Ù€Øº Ù…Ù€Ø¹   Ø§Ù„Ù€Ø¶Ù€Ø±ÙŠÙ€Ø¨Ù€Ø©**  :  **__${taxwi}__** \n ** ðŸ’µ Ø§Ù„Ù€Ù…Ù€Ø¨Ù€Ù„Ù€Øº Ù…Ù€Ø¹ Ø¶Ù€Ø±ÙŠÙ€Ø¨Ù€Ø© Ø§Ù„Ù€ÙˆØ³Ù€ÙŠÙ€Ø· **  : **__${tax4}__**`,
    );
}

module.exports = { calculateTax };
